{% set tbb_version = "2022.0.0" %}
# this variable defines oneMKL specific version
{% set mkl_version = "2025.0.0" %}
# this variable defines oneMKL specific buildnum
{% set mkl_buildnum = "" %}
{% set mkl_buildnum = "939" %}  # [linux]
{% set mkl_buildnum = "928" %}  # [win]
# this variable defines oneDAL specific version
{% set dal_version = "2025.0.0" %}
# this variable defines oneDAL specific buildnum
{% set dal_buildnum = "" %}
{% set dal_buildnum = "957" %}  # [linux]
{% set dal_buildnum = "947" %}  # [win]
# this variable defines openmp specific version
{% set openmp_version = "2025.0.0" %}
# this variable defines openmp specific buildnum
{% set openmp_buildnum = "" %}
{% set openmp_buildnum = "1169" %}  # [linux]
{% set openmp_buildnum = "1162" %}  # [win]

# this variable defines impi specific version
{% set impi_version = "2021.14.1" %}
# this variable defines impi specific buildnum
{% set impi_buildnum = "" %}
{% set impi_buildnum = "5" %}  # [linux]
{% set impi_buildnum = "6" %}  # [win]

# this variable defines onedpl specific version
{% set onedpl_version = "2022.6.1" %}
# this variable defines onedpl specific buildnum
{% set onedpl_buildnum = "12" %}  # [linux]
{% set onedpl_buildnum = "11" %}  # [win]


{% set my_channel_targets = channel_targets if channel_targets is defined else ['conda-forge', 'defaults'] %}

{% set intel_ch = "https://software.repos.intel.com/python/conda" %}
# use this if our build script changes and we need to increment beyond intel's version
{% set dstbuildnum = '4' %}

# We need intel-openmp because it contains VCOMP symbols on windows in order to
# pytorch work. Those are deprecated symbols and should be removed in the
# future.
# https://github.com/conda-forge/intel_repack-feedstock/issues/59#issuecomment-1790007397
# More info about OpenMP mutex could be found on conda-forge wiki:
# https://conda-forge.org/docs/maintainer/knowledge_base/#openmp
{% set openmp_pkg = "llvm-openmp" %}
{% set openmp_mutex = "- _openmp_mutex * *_llvm" %}
{% if win or 'conda-forge' not in my_channel_targets %}
{% set openmp_pkg = "intel-openmp " ~ openmp_version.split('.')[0] ~ ".*" %}
# There is no mutex for intel-openmp, so we don't need it
{% set openmp_mutex = "" %}
{% endif %}

package:
  name: intel_repack
  # Use oneDAL as overall repack package version
  version: {{ dal_version }}

source:
  - url: {{ intel_ch }}/{{ target_platform }}/mkl-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/mkl-devel-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-devel
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/mkl-include-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-include
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/mkl-static-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-static
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-blas-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-blas
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-datafitting-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-datafitting
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-dft-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-dft
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-lapack-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-lapack
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-rng-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-rng
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-sparse-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-sparse
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-stats-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-stats
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onemkl-sycl-vm-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: onemkl-sycl-vm
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/mkl-dpcpp-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-dpcpp
    no_hoist: true
  {% if win or 'conda-forge' not in my_channel_targets %}
  - url: {{ intel_ch }}/{{ target_platform }}/intel-openmp-{{ openmp_version }}-intel_{{ openmp_buildnum }}.tar.bz2
    folder: intel-openmp
    no_hoist: true
  {% endif %}
  - url: {{ intel_ch }}/{{ target_platform }}/dal-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/dal-include-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal-include
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/dal-static-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal-static
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/dal-devel-{{ dal_version }}-intel_{{ dal_buildnum }}.tar.bz2
    folder: dal-devel
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/impi_rt-{{ impi_version }}-intel_{{ impi_buildnum }}.tar.bz2
    folder: impi_rt
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/impi-devel-{{ impi_version }}-intel_{{ impi_buildnum }}.tar.bz2
    folder: impi-devel
    no_hoist: true
  - url: {{ intel_ch }}/{{ target_platform }}/onedpl-devel-{{ onedpl_version }}-intel_{{ onedpl_buildnum }}.tar.bz2
    folder: onedpl-devel
    no_hoist: true
build:
  number: {{ dal_buildnum|int + dstbuildnum|int }}
  binary_relocation: false
  detect_binary_files_with_prefix: false
  skip: True                                  # [not (linux64 or win)]

outputs:
  - name: mkl
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - {{ openmp_pkg }}
        {{ openmp_mutex }}
      host:
        - tbb-devel {{ tbb_version.split('.')[0] }}.*
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - mkl/info/licenses/license.txt
         - mkl/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [linux]
        - test -f $PREFIX/lib/libmkl_core.so.2  # [linux]
        - if not exist %LIBRARY_BIN%\\mkl_core.2.dll exit 1  # [win]

  - name: mkl-include
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - mkl-include/info/licenses/license.txt
         - mkl-include/info/licenses/tpp.txt
      summary: Headers for building against Intel® oneMKL libraries
      description: |
        Intel® oneAPI Math Kernel Library headers for developing software that uses oneMKL
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
        - ls -A $PREFIX/include/*  # [linux]
        - test -f $PREFIX/include/mkl.h  # [linux]
        - if not exist %LIBRARY_INC%\\mkl.h exit 1  # [win]

  - name: onemkl-sycl-blas
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-blas/info/licenses/license.txt
         - onemkl-sycl-blas/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_blas.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_blas.5.dll exit 1  # [win]

  - name: onemkl-sycl-datafitting
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-datafitting/info/licenses/license.txt
         - onemkl-sycl-datafitting/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_data_fitting.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_data_fitting.5.dll exit 1  # [win]

  - name: onemkl-sycl-dft
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-dft/info/licenses/license.txt
         - onemkl-sycl-dft/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_dft.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_dft.5.dll exit 1  # [win]

  - name: onemkl-sycl-lapack
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-blas', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-blas', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-lapack/info/licenses/license.txt
         - onemkl-sycl-lapack/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_lapack.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_lapack.5.dll exit 1  # [win]

  - name: onemkl-sycl-rng
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-rng/info/licenses/license.txt
         - onemkl-sycl-rng/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_rng.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_rng.5.dll exit 1  # [win]

  - name: onemkl-sycl-sparse
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        - {{ pin_subpackage('onemkl-sycl-blas', exact=True) }}
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        - {{ pin_subpackage('onemkl-sycl-blas', exact=True) }}
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-sparse/info/licenses/license.txt
         - onemkl-sycl-sparse/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_sparse.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_sparse.5.dll exit 1  # [win]

  - name: onemkl-sycl-stats
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-stats/info/licenses/license.txt
         - onemkl-sycl-stats/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_stats.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_stats.5.dll exit 1  # [win]

  - name: onemkl-sycl-vm
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    build:
      ignore_run_exports_from:
        {{ openmp_mutex }}
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ c_stdlib }}_{{ target_platform }} {{ c_stdlib_sycl_version }}  # [linux]
        - {{ stdlib('c') }}  # [not linux]
        {{ openmp_mutex }}
      host:
        - intel-sycl-rt {{ mkl_version.split('.')[0] }}.*
        # cpu runtime
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        {{ openmp_mutex }}
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
      run:
        # We need mkl because onemkl-sycl-* packages uses symbols from mkl, but
        # not linked directly so you can chose different implementations.
        # More information could be found at:
        # https://www.intel.com/content/www/us/en/docs/onemkl/developer-guide-linux/2025-0/layered-model-concept.html
        - {{ pin_subpackage('mkl', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - onemkl-sycl-vm/info/licenses/license.txt
         - onemkl-sycl-vm/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library runtime libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]
          - test -f $PREFIX/lib/libmkl_sycl_vm.so.5  # [linux]
          - if not exist %LIBRARY_BIN%\\mkl_sycl_vm.5.dll exit 1  # [win]

  - name: mkl-dpcpp
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      run:
        - {{ pin_subpackage('mkl', exact=True) }}
        - dpcpp-cpp-rt {{ mkl_version.split('.')[0] }}.*
        - intel-opencl-rt {{ mkl_version.split('.')[0] }}.*
        - {{ pin_subpackage('onemkl-sycl-blas', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-datafitting', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-dft', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-lapack', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-rng', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-sparse', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-stats', exact=True) }}
        - {{ pin_subpackage('onemkl-sycl-vm', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - mkl-dpcpp/info/licenses/license.txt
         - mkl-dpcpp/info/licenses/tpp.txt
      summary: Intel® oneAPI Math Kernel Library dpcpp libraries
      description: |
        Intel® oneAPI Math Kernel Library is Intel®-Optimized Math Library for Numerical Computing on CPUs & GPUs
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
    test:
      commands:
          - ls -A $PREFIX/lib/*  # [linux]

  {% if win or 'conda-forge' not in my_channel_targets %}
  - name: intel-openmp
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ openmp_buildnum|int + dstbuildnum|int }}
    version: {{ openmp_version }}
    build:
      host:
        - intel-cmplr-lib-ur {{ openmp_version.split('.')[0] }}.*
      run_constrained:
        # prevent clobbering if user tries to install llvm's implementation
        # TODO: use intel mutex or build windows torch in conda-froge
        # https://github.com/conda-forge/intel-graphics-compiler-feedstock/pull/59
        - llvm-openmp <0a0
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/overview.html
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - intel-openmp/info/licenses/license.txt
         - intel-openmp/info/licenses/tpp.txt
      summary: Intel® oneAPI Compiler OpenMP runtime
      description: |
        Intel® oneAPI Compiler OpenMP runtime implementation
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/overview.html
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [linux]
        - test -f $PREFIX/lib/libomp5.so  # [linux]
        - if not exist %LIBRARY_BIN%\\omptarget.dll exit 1  # [win]

  {% endif %}

  {% if 'conda-forge' not in my_channel_targets %}
  # mutex package to keep only one blas implementation in a given env
  - name: blas
    version: 1.0
    build:
      string: mkl
    test:
      commands:
        - echo 'works!'
    about:
      home: https://github.com/conda-forge/intel_repack-feedstock
      license: BSD-3-Clause
      license_file: ANACONDA_LICENSE
      summary: 'BLAS mutex for MKL'
  {% endif %}

  - name: mkl-devel
    version: {{ mkl_version }}
    script: install-devel.sh   # [linux]
    script: install-devel.bat  # [win]
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    build:
      run_exports:
        - {{ pin_subpackage('mkl') }}
        {% if 'conda-forge' not in my_channel_targets %}
        - {{ pin_subpackage('blas', exact=True) }}
        {% endif %}
    requirements:
      run:
        - {{ pin_subpackage('mkl', exact=True) }}
        - {{ pin_subpackage('mkl-include', exact=True) }}
        {% if 'conda-forge' not in my_channel_targets %}
        - blas * mkl
        {% endif %}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      summary: Devel package for building against Intel® oneMKL libraries
      description: |
        Intel® oneAPI Math Kernel Library headers and libraries for developing software that uses oneMKL
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - mkl-devel/info/licenses/license.txt
         - mkl-devel/info/licenses/tpp.txt
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [linux]
        - ls -A $PREFIX/include/*  # [linux]
        - ls -A $PREFIX/lib/pkgconfig/*  # [linux]
        - test -f $PREFIX/lib/pkgconfig/mkl-sdl.pc  # [linux]
        - if not exist %LIBRARY_LIB%\\pkgconfig\\mkl-sdl.pc exit 1  # [win]

  - name: mkl-static
    version: {{ mkl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ mkl_buildnum|int + dstbuildnum|int }}
    requirements:
      run:
        - {{ pin_subpackage('mkl-include', exact=True) }}
        - tbb {{ tbb_version.split('.')[0] }}.*
        {% if win or 'conda-forge' not in my_channel_targets %}
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
        {% else %}
        - llvm-openmp
        {% endif %}
        {% if 'conda-forge' not in my_channel_targets %}
        - blas * mkl
        {% endif %}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html
      summary: Static libraries for Intel® oneMKL libraries
      description: |
        Intel® oneAPI Math Kernel Library static libraries for developing software that uses oneMKL
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - mkl-static/info/licenses/license.txt
         - mkl-static/info/licenses/tpp.txt
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [linux]
        - test -f $PREFIX/lib/libmkl_core.a  # [linux]
        - if not exist %LIBRARY_LIB%\\mkl_core.lib exit 1  # [win]

  - name: dal
    version: {{ dal_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ dal_buildnum|int + dstbuildnum|int }}
    build:
      binary_relocation: false
      detect_binary_files_with_prefix: false
      ignore_run_exports_from:
        - intel-sycl-rt
        - intel-cmplr-lib-rt
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        - intel-opencl-rt
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
      host:
        - intel-sycl-rt {{ dal_version.split('.')[0] }}.*
        - intel-cmplr-lib-rt {{ dal_version.split('.')[0] }}.*
        - tbb-devel {{ tbb_version.split('.')[0] }}.*
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # cpu runtime
        - intel-opencl-rt {{ dal_version.split('.')[0] }}.*
      run_constrained:
        - {{ pin_compatible('intel-sycl-rt') }}
        - {{ pin_compatible('intel-cmplr-lib-rt') }}
        - {{ pin_compatible('ocl-icd') }}  # [linux]
        - {{ pin_compatible('khronos-opencl-icd-loader') }}  # [win]
        - {{ pin_compatible('intel-opencl-rt') }}

    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onedal.html
      summary: Intel® oneDAL runtime libraries
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - dal/info/licenses/license.txt
         - dal/info/licenses/tpp.txt
      description: |
        Intel® oneAPI Data Analytics Library  (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - test -f $PREFIX/lib/libonedal.so.3  # [linux]
        - if not exist %LIBRARY_BIN%\\onedal.3.dll exit 1  # [win]

  - name: dal-include
    version: {{ dal_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ dal_buildnum|int + dstbuildnum|int }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onedal.html
      summary: Headers for building against Intel® oneDAL libraries
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - dal-include/info/licenses/license.txt
         - dal-include/info/licenses/tpp.txt
      description: |
        Intel® oneAPI Data Analytics Library  (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/include/*  # [linux]
        - test -f $PREFIX/include/daal.h  # [linux]

  - name: dal-static
    version: {{ dal_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ dal_buildnum|int + dstbuildnum|int }}
    requirements:
      host:
        - tbb-devel {{ tbb_version.split('.')[0] }}.*
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onedal.html
      summary: Static libraries for Intel® oneDAL
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - dal-static/info/licenses/license.txt
         - dal-static/info/licenses/tpp.txt
      description: |
        Intel® oneAPI Data Analytics Library  (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [linux]
        - test -f $PREFIX/lib/libonedal.a  # [linux]
        - test -f $PREFIX/lib/libonedal_core.a  # [linux]
        - if not exist %LIBRARY_LIB%\\onedal.lib exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\onedal_core.lib exit 1  # [win]

  - name: dal-devel
    version: {{ dal_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ dal_buildnum|int + dstbuildnum|int }}
    run_exports:
        - {{ pin_subpackage('dal') }}
    build:
      ignore_run_exports_from:
        - intel-sycl-rt
        - intel-cmplr-lib-rt
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        - intel-opencl-rt
    requirements:
      host:
        - intel-sycl-rt {{ dal_version.split('.')[0] }}.*
        - intel-cmplr-lib-rt {{ dal_version.split('.')[0] }}.*
        - ocl-icd  # [linux]
        - khronos-opencl-icd-loader  # [win]
        # cpu runtime
        - intel-opencl-rt {{ dal_version.split('.')[0] }}.*
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - {{ pin_subpackage('dal', exact=True) }}
      run_constrained:
        - {{ pin_compatible('intel-sycl-rt', exact=True) }}
        - {{ pin_compatible('intel-cmplr-lib-rt', exact=True) }}
        - {{ pin_compatible('ocl-icd') }}  # [linux]
        - {{ pin_compatible('khronos-opencl-icd-loader') }}  # [win]
        - {{ pin_compatible('intel-opencl-rt') }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/onedal.html
      summary: Devel package for building against Intel® oneDAL shared libraries
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - dal-devel/info/licenses/license.txt
         - dal-devel/info/licenses/tpp.txt
      description: |
        Intel® oneAPI Data Analytics Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [linux]
        - test -f $PREFIX/lib/libonedal_sycl.a  # [linux]
        - if not exist %LIBRARY_LIB%\\onedal_sycl.lib exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\onedal_dpc_dll.lib exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\onedal_dll.lib exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\onedal_core_dll.lib exit 1  # [win]

  - name: impi_rt
    version: {{ impi_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ impi_buildnum|int + dstbuildnum|int }}  # [linux or win]
    build:
      detect_binary_files_with_prefix: false
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - {{ openmp_pkg }}
      run:
        - mpi 1.0 impi
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
      summary: Intel® MPI Library
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - impi_rt/info/licenses/license.txt
         - impi_rt/info/licenses/tpp.txt
      description: |
        Intel® MPI Library is a multifabric message-passing library that implements the open 
        source MPICH specification. Use the library to create, maintain, and test advanced, 
        complex applications that perform better on HPC clusters based on Intel® and 
        compatible processors.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
    test:
      commands:
        - ls -A $PREFIX/bin/*  # [linux]
        - ls -A $PREFIX/lib/*  # [linux]
        - test -f $PREFIX/bin/mpiexec  # [linux]
        - test -f $PREFIX/bin/impi_info  # [linux]
        - test -f $PREFIX/lib/libmpi.so  # [linux]
        - if not exist %LIBRARY_BIN%\\mpiexec.exe exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\impi_info.exe exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\impi.dll exit 1  # [win]

  - name: impi-devel
    version: {{ impi_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ impi_buildnum|int + dstbuildnum|int }}  # [linux or win]
    build:
      detect_binary_files_with_prefix: false
      run_exports:
        - {{ pin_subpackage('impi_rt', min_pin="x.x.x", max_pin="x.x.x") }}
    requirements:
      run:
        - {{ pin_subpackage('impi_rt', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
      summary: Devel package for building against Intel® MPI libraries
      license: LicenseRef-IntelSimplifiedSoftwareOct2022
      license_family: Proprietary
      license_file:
         - impi-devel/info/licenses/license.txt
         - impi-devel/info/licenses/tpp.txt
      description: |
        Intel® MPI Library is a multifabric message-passing library that implements the open 
        source MPICH specification. Use the library to create, maintain, and test advanced, 
        complex applications that perform better on HPC clusters based on Intel® and 
        compatible processors.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
    test:
      commands:
        - ls -A $PREFIX/bin/*  # [linux]
        - test -f $PREFIX/bin/mpicc  # [linux]
        - test -f $PREFIX/bin/mpifc  # [linux]
        - test -f $PREFIX/bin/mpicxx  # [linux]
        - test -f $PREFIX/include/mpi.h  # [linux]
        - if not exist %LIBRARY_BIN%\\mpicc.bat exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\mpicl.bat exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\mpifc.bat exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\mpicxx.bat exit 1  # [win]
        - if not exist %LIBRARY_INC%\\mpi.h exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\impi.lib exit 1  # [win]

  - name: onedpl-devel
    version: {{ onedpl_version }}
    script: repack.sh   # [linux]
    script: repack.bat  # [win]
    number: {{ onedpl_buildnum|int + dstbuildnum|int }}  # [linux or win]
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-library.html
      summary: Intel® oneAPI DPC++ Library
      license: Apache-2.0
      license_file: clang/LICENSE.TXT
      license_file:
         - onedpl-devel/share/licensing/dpl/license.txt
         - onedpl-devel/share/licensing/dpl/third-party-programs.txt
      description: |
        The Intel® oneAPI DPC++ Library (oneDPL) is a companion to the
        Intel® oneAPI DPC++/C++ Compiler and provides an alternative for C++ 
        developers who create heterogeneous applications and solutions. Its APIs
        are based on familiar standards—C++ STL, Parallel STL (PSTL),
        Boost.Compute, and SYCL*—to maximize productivity and performance across
        CPUs, GPUs, and FPGAs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/dpc-library.html
    test:
      commands:
        - ls -A $PREFIX/include/oneapi/*  # [linux]
        - test -f $PREFIX/include/oneapi/dpl/cmath  # [linux]
        - test -f $PREFIX/lib/cmake/oneDPL/oneDPLConfig.cmake  # [linux]
        - test -f $PREFIX/lib/pkgconfig/dpl.pc  # [linux]
        - if not exist %LIBRARY_INC%\\oneapi\\dpl\\cmath exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\cmake\\oneDPL\\oneDPLConfig.cmake exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\pkgconfig\\dpl.pc exit 1  # [win]
# please the linter
about:
  home: https://github.com/conda-forge/intel_repack-feedstock
  license: LicenseRef-IntelSimplifiedSoftwareOct2022
  summary: 'Repackaged Intel libraries'

extra:
  recipe-maintainers:
    - isuruf
    - beckermr
    - napetrov
    - oleksandr-pavlyk 
    - alexsandruss
    - ZzEeKkAa
