{% set tbb_version = "2021.10.0" %}
# this variable defines oneMKL specific version
{% set mkl_version = "2023.2.0" %}
# this variable defines oneMKL specific buildnum
{% set mkl_buildnum = "49495" %}  # [linux]
{% set mkl_buildnum = "49499" %}  # [osx]
{% set mkl_buildnum = "49496" %}  # [win]
# this variable defines oneDAL specific version
{% set version = "2023.2.1" %}
# this variable defines oneDAL specific buildnum
{% set buildnum = "32" %}  # [linux]
{% set buildnum = "33" %}  # [osx]
{% set buildnum = "38" %}  # [win]
# this variable defines openmp specific version
{% set openmp_version = "2023.2.0" %}
# this variable defines openmp specific buildnum
{% set openmp_buildnum = "49495" %}  # [linux]
{% set openmp_buildnum = "49499" %}  # [osx]
{% set openmp_buildnum = "49496" %}  # [win]

# this variable defines impi specific version
{% set impi_version = "2021.10.0" %}
# this variable defines impi specific buildnum
{% set impi_buildnum = "49371" %}  # [linux]
{% set impi_buildnum = "49372" %}  # [win]


{% set my_channel_targets = channel_targets if channel_targets is defined else ['conda-forge', 'defaults'] %}
# use this if our build script changes and we need to increment beyond intel's version
{% set dstbuildnum = '4' %}

package:
  name: intel_repack
  version: {{ version }}

source:
  - url: https://anaconda.org/intel/mkl/{{ mkl_version }}/download/{{ target_platform }}/mkl-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl
    no_hoist: true
  - url: https://anaconda.org/intel/mkl-devel/{{ mkl_version }}/download/{{ target_platform }}/mkl-devel-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-devel
    no_hoist: true
  - url: https://anaconda.org/intel/mkl-include/{{ mkl_version }}/download/{{ target_platform }}/mkl-include-{{ mkl_version }}-intel_{{ mkl_buildnum }}.tar.bz2
    folder: mkl-include
    no_hoist: true
  {% if win or 'conda-forge' not in my_channel_targets %}
  - url: https://anaconda.org/intel/intel-openmp/{{ openmp_version }}/download/{{ target_platform }}/intel-openmp-{{ openmp_version }}-intel_{{ openmp_buildnum }}.tar.bz2
    folder: intel-openmp
    no_hoist: true
  {% endif %}
  - url: https://anaconda.org/intel/dal/{{ version }}/download/{{ target_platform }}/dal-{{ version }}-intel_{{ buildnum }}.tar.bz2
    folder: dal
    no_hoist: true
  - url: https://anaconda.org/intel/dal-include/{{ version }}/download/{{ target_platform }}/dal-include-{{ version }}-intel_{{ buildnum }}.tar.bz2
    folder: dal-include
    no_hoist: true
  - url: https://anaconda.org/intel/dal-static/{{ version }}/download/{{ target_platform }}/dal-static-{{ version }}-intel_{{ buildnum }}.tar.bz2
    folder: dal-static
    no_hoist: true
  - url: https://anaconda.org/intel/dal-devel/{{ version }}/download/{{ target_platform }}/dal-devel-{{ version }}-intel_{{ buildnum }}.tar.bz2
    folder: dal-devel
    no_hoist: true
  {% if not osx %}
  - url: https://anaconda.org/intel/impi_rt/{{ impi_version }}/download/{{ target_platform }}/impi_rt-{{ impi_version }}-intel_{{ impi_buildnum }}.tar.bz2
    folder: impi_rt
    no_hoist: true
  - url: https://anaconda.org/intel/impi-devel/{{ impi_version }}/download/{{ target_platform }}/impi-devel-{{ impi_version }}-intel_{{ impi_buildnum }}.tar.bz2
    folder: impi-devel
    no_hoist: true
  {% endif %}
build:
  # 117 was intel's base build number.  We're up 1 after making the license file not read-only
  number: {{ buildnum|int + dstbuildnum|int }}
  binary_relocation: false
  detect_binary_files_with_prefix: false
  skip: True                                  # [not x86]
  missing_dso_whitelist:
    # just ignore tbb on mac.  We could add it as a dep when we have it.
    - libtbb.dylib                   # [osx]
    - "$RPATH/libtbb.dylib"          # [osx]
    # this one should be here, probably needs fixup of RUNPATH/RPATH
    - libiomp5.dylib                   # [osx]
    - "$RPATH/libiomp5.dylib"          # [osx]
    # normal linux stuff that would go away if we had libgcc-ng in the run deps
    - /lib*/ld-linux.so.2
    - /lib64/ld-linux-x86-64.so.2
    - /lib*/libpthread.so.0
    - /lib*/libdl.so.2
    - /lib*/libgcc_s.so.1
    - /lib*/libc.so.6
    - /lib*/libm.so.6
    # these two really shouldn't be here.  See mkl_repack_and_patchelf.sh
    - libiomp5.so
    - libcoi_device.so.0
    - /usr/lib/libstdc++.so.6       # [linux]
    - /usr/lib64/libstdc++.so.6     # [linux]
    - /usr/lib/libc++.1.dylib       # [osx]
    # hooray, windows
    - "C:\\Windows\\System32\\WINTRUST.dll"

outputs:
  - name: mkl
    version: {{ mkl_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    requirements:
      {% if win or 'conda-forge' not in my_channel_targets %}
      host:
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
        - tbb {{ tbb_version.split('.')[0] }}.*
      run:
        - intel-openmp {{ openmp_version.split('.')[0] }}.*
        - tbb {{ tbb_version.split('.')[0] }}.*
      {% else %}
      host:
        - llvm-openmp
        - tbb {{ tbb_version.split('.')[0] }}.*
      run:
        - llvm-openmp
        - tbb {{ tbb_version.split('.')[0] }}.*
      {% endif %}
    about:
      home: https://software.intel.com/en-us/mkl
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - mkl/info/licenses/license.txt
         - mkl/info/licenses/tpp.txt
      summary: Math library for Intel and compatible processors
      description: |
        Intel Math Kernel Library is a BLAS implementation tuned for high performance on Intel CPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/mkl/documentation
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]

  - name: mkl-include
    version: {{ mkl_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    about:
      home: https://software.intel.com/en-us/mkl
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - mkl-include/info/licenses/license.txt
         - mkl-include/info/licenses/tpp.txt
      summary: MKL headers for developing software that uses MKL
      description: |
        Intel Math Kernel Library is a BLAS implementation tuned for high performance on Intel CPUs.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/mkl/documentation
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix]

  {% if win or 'conda-forge' not in my_channel_targets %}
  - name: intel-openmp
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    number: {{ openmp_buildnum }}
    version: {{ openmp_version }}
    about:
      home: https://software.intel.com/en-us/node/522690
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - intel-openmp/info/licenses/license.txt
         - intel-openmp/info/licenses/tpp.txt
      summary: Math library for Intel and compatible processors
      description: |
        Intel openmp runtime implementation
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: https://software.intel.com/en-us/node/522690
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]
  {% endif %}

  {% if 'conda-forge' not in my_channel_targets %}
  # mutex package to keep only one blas implementation in a given env
  - name: blas
    version: 1.0
    build:
      string: mkl
    test:
      commands:
        - echo 'works!'
    about:
      home: https://github.com/conda-forge/intel-repack-feedstock
      license: BSD-3-Clause
      license_file: ANACONDA_LICENSE
      summary: 'BLAS mutex for MKL'
  {% endif %}

  - name: mkl-devel
    version: {{ mkl_version }}
    script: install-devel.sh   # [unix]
    script: install-devel.bat  # [win]
    build:
      # we had to fix site.cfg in 2019.1.  We're off by one.
      number: {{ buildnum|int + dstbuildnum|int + 1 }}
      # when stuff is built with MKL, ensure that constraint makes mkl runtime libs as new or
      #     newer than build version
      run_exports:
        - {{ pin_subpackage('mkl') }}
        {% if 'conda-forge' not in my_channel_targets %}
        - {{ pin_subpackage('blas', exact=True) }}
        {% endif %}
    requirements:
      run:
        - {{ pin_subpackage('mkl', exact=True) }}
        - {{ pin_subpackage('mkl-include', exact=True) }}
        {% if 'conda-forge' not in my_channel_targets %}
        - blas * mkl
        {% endif %}
    about:
      home: https://software.intel.com/en-us/mkl
      summary: Metapackage of MKL headers and libraries for developing software that uses MKL
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - mkl-devel/info/licenses/license.txt
         - mkl-devel/info/licenses/tpp.txt
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix]
        - ls -A $PREFIX/include/*  # [unix]

  - name: dal
    script: repack.sh   # [unix or osx]
    script: repack.bat  # [win]
    build:
      number: {{ buildnum|int + dstbuildnum|int }}
      binary_relocation: false
      detect_binary_files_with_prefix: false
      missing_dso_whitelist:
        # this one should be here, probably needs fixup of RUNPATH/RPATH
        - libiomp5.dylib                   # [osx]
        - "$RPATH/libiomp5.dylib"          # [osx]
        # normal linux stuff that would go away if we had libgcc-ng in the run deps
        - /lib*/ld-linux.so.2
        - /lib64/ld-linux-x86-64.so.2
        - /lib*/libpthread.so.0
        - /lib*/libdl.so.2
        - /lib*/libgcc_s.so.1
        - /lib*/libc.so.6
        - /lib*/libm.so.6
        - lib/libgcc_s.so.1
        # these two really shouldn't be here.  See mkl_repack_and_patchelf.sh
        - libiomp5.so
        - libcoi_device.so.0
        - /usr/lib/libstdc++.so.6       # [linux]
        - /usr/lib64/libstdc++.so.6     # [linux]
        - /usr/lib/libc++.1.dylib       # [osx]
        # hooray, windows
        - "C:\\Windows\\System32\\WINTRUST.dll"
    requirements:
      host:
        - tbb {{ tbb_version.split('.')[0] }}.*
      run:
        - tbb {{ tbb_version.split('.')[0] }}.*
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onedal.html
      summary: Intel® oneDAL runtime libraries
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - dal/info/licenses/license.txt
         - dal/info/licenses/tpp.txt
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix or osx]

  - name: dal-include
    script: repack.sh   # [unix or osx]
    script: repack.bat  # [win]
    build:
      number: {{ buildnum|int + dstbuildnum|int }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onedal.html
      summary: Headers for building against Intel® oneDAL libraries
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - dal-include/info/licenses/license.txt
         - dal-include/info/licenses/tpp.txt
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/include/*  # [unix or osx]

  - name: dal-static
    script: repack.sh   # [unix or osx]
    script: repack.bat  # [win]
    build:
      number: {{ buildnum|int + dstbuildnum|int }}
    requirements:
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - tbb {{ tbb_version.split('.')[0] }}.*
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onedal.html
      summary: Static libraries for Intel® oneDAL
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - dal-static/info/licenses/license.txt
         - dal-static/info/licenses/tpp.txt
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix or osx]

  - name: dal-devel
    script: repack.sh   # [unix or osx]
    script: repack.bat  # [win]
    build:
      number: {{ buildnum|int + dstbuildnum|int }}
      run_exports:
        - {{ pin_subpackage('dal') }}
    requirements:
      run:
        - {{ pin_subpackage('dal-include', exact=True) }}
        - {{ pin_subpackage('dal', exact=True) }}
    about:
      home: https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/onedal.html
      summary: Devel package for building things linked against Intel® oneDAL shared libraries
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - dal-devel/info/licenses/license.txt
         - dal-devel/info/licenses/tpp.txt
      description: |
        Intel® Data Analytics Acceleration Library (Intel® oneDAL) is the library of Intel® architecture
        optimized building blocks covering all stages of data analytics: data acquisition from a data
        source, preprocessing, transformation, data mining, modeling, validation, and decision making.
        This package is a repackaged set of binaries obtained directly from Intel\'s anaconda.org channel.
      doc_url: http://oneapi-src.github.io/oneDAL/
    test:
      commands:
        - ls -A $PREFIX/lib/*  # [unix or osx]
        - ls -A $PREFIX/include/*  # [unix or osx]

  - name: impi_rt
    version: {{ impi_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [osx]
      number: {{ buildnum|int + dstbuildnum|int }}
      detect_binary_files_with_prefix: false
      missing_dso_whitelist:
        # this one should be here, probably needs fixup of RUNPATH/RPATH
        - libiomp5.dylib                   # [osx]
        - "$RPATH/libiomp5.dylib"          # [osx]
        # normal linux stuff that would go away if we had libgcc-ng in the run deps
        - /lib*/ld-linux.so.2
        - /lib64/ld-linux-x86-64.so.2
        - /lib*/libpthread.so.0
        - /lib*/libdl.so.2
        - /lib*/libgcc_s.so.1
        - /lib*/libc.so.6
        - /lib*/libm.so.6
        - lib/libgcc_s.so.1
        # these two really shouldn't be here.  See mkl_repack_and_patchelf.sh
        - libiomp5.so
        - libcoi_device.so.0
        - /usr/lib/libstdc++.so.6       # [linux]
        - /usr/lib64/libstdc++.so.6     # [linux]
        - /usr/lib/libc++.1.dylib       # [osx]
        # hooray, windows
        - "C:\\Windows\\System32\\WINTRUST.dll"
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
      summary: Intel® MPI Library
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - impi_rt/info/licenses/license.txt
         - impi_rt/info/licenses/tpp.txt
      description: |
        Intel® MPI Library is a multifabric message-passing library that implements the open 
        source MPICH specification. Use the library to create, maintain, and test advanced, 
        complex applications that perform better on HPC clusters based on Intel® and 
        compatible processors.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
    test:
      commands:
        - test -f $PREFIX/bin/mpiexec  # [unix]
        - test -f $PREFIX/bin/impi_info  # [unix]
        - test -f $PREFIX/lib/libmpi.so  # [unix]
        - if not exist %LIBRARY_BIN%\\mpiexec.exe exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\impi_info.exe exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\impi.dll exit 1  # [win]

  - name: impi-devel
    version: {{ impi_version }}
    script: repack.sh   # [unix]
    script: repack.bat  # [win]
    build:
      skip: True  # [osx]
      number: {{ buildnum|int + dstbuildnum|int }}
      detect_binary_files_with_prefix: false
      run_exports:
        - {{ pin_subpackage('impi_rt') }}
    requirements:
      run:
        - {{ pin_subpackage('impi_rt', exact=True) }}
    about:
      home: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
      summary: Intel® MPI Library
      license: LicenseRef-ProprietaryIntel
      license_family: Proprietary
      license_file:
         - impi-devel/info/licenses/license.txt
         - impi-devel/info/licenses/tpp.txt
      description: |
        Intel® MPI Library is a multifabric message-passing library that implements the open 
        source MPICH specification. Use the library to create, maintain, and test advanced, 
        complex applications that perform better on HPC clusters based on Intel® and 
        compatible processors.
      doc_url: https://www.intel.com/content/www/us/en/developer/tools/oneapi/mpi-library.html
    test:
      commands:
        - test -f $PREFIX/bin/mpicc  # [unix]
        - test -f $PREFIX/bin/mpifc  # [unix]
        - test -f $PREFIX/bin/mpicxx  # [unix]
        - test -f $PREFIX/include/mpi.h  # [unix]
        - if not exist %LIBRARY_BIN%\\mpicc.bat exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\mpicl.bat exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\mpifc.bat exit 1  # [win]
        - if not exist %LIBRARY_BIN%\\mpicxx.bat exit 1  # [win]
        - if not exist %LIBRARY_INC%\\mpi.h exit 1  # [win]
        - if not exist %LIBRARY_LIB%\\impi.lib exit 1  # [win]

# please the linter
about:
  home: https://github.com/conda-forge/intel-repack-feedstock
  license: LicenseRef-ProprietaryIntel
  summary: 'repackaged intel libraries'

extra:
  recipe-maintainers:
    - isuruf
    - beckermr
    - napetrov
    - oleksandr-pavlyk 
    - alexsandruss
